[
{
	"uri": "/200_refactoring-engine/210_servicecreation/1_dev_vm.html",
	"title": "Dev VM Content",
	"tags": [],
	"description": "",
	"content": "\nDev VM Content Connect to Windows VM (credentials are workshop/vFunction2021!)\nOpen Windows Explorer and see the folder structure under C:\\vFunctionLab. Most of the work in the section is done in this folder as described here:\nYou should also see icons on the desktop for Chrome, Eclipse and Postman.\nThe folder c:\\vFunctionLab\\oms-tutorial\\oms-services can be used as a reference to resolve any compilation or runtime issues encountered during this phase. You can compare your code with the code in that folder using WinDiff.\n"
},
{
	"uri": "/200_refactoring-engine/1_import_baseline.html",
	"title": "Importing measurements",
	"tags": [],
	"description": "",
	"content": "\nImporting the completed point measurement If you have not completed the AO workshop you can import the final measurement to proceed with the RE Workshop.\nGo to the vFunction Server Web UI\nSwitch to the Analysis page\nClick MEASUREMENTS (bottom of the pane), select IMPORT MEASUREMENT and then CHOOSE FILE in the popup dialog\nIn the Open file dialog, select C:\\vFunctionLab\\measurements\\Analysis-Tutorial-Complete.zip and click Open\nClick IMPORT\nThe initial measurement should load after a few seconds.\nClick on the bell shaped icon at the top of the page to see the notifications - you should have a notification that the learning results include beans and database tables.\nClick Configure Parameters under ACTIONS in the left pane, and ensure the checkmark Enable Auto Refactoring is checked (turned on)\n"
},
{
	"uri": "/",
	"title": "Microservice Deployment: vFunction Refactoring Engine for AWS Workshop",
	"tags": [],
	"description": "",
	"content": "\nMicroservice Deployment: vFunction Refactoring Engine for AWS Workshop Introduction vFunction Refactoring Engine and vFunction Architectural Observability Manager provide a full end-to-end modernization solution that helps architects find and fix technical debt, build a domain-based design architecture, and the decompose the application into microservices to efficiently deploy on to AWS architecture using best practices such as the Strangler Fig Pattern. The vFunction continuous modernization platform analyzes architectures and enables architects to automate application modernization and re-architect their Java and .NET applications into microservices, functions, or more modular apps on AWS cloud native infrastructure.\nIn this workshop, we will cover how to efficiently decompose monolithic apps into microservices, functions, or modular services, and then how to safely stage, migrate, and deploy those microservice applications onto AWS environments, so enterprises can breathe new life into their complex applications, and refactor old code for new cloud environments.\nThe vFunction platform has two modules:\nArchitectural Observability (AO): for analyzing the applications and continuously monitor and handle architectural debt and drifts. A separate workshop is available for Architectural Observability.\nRefactoring Engine (RE): automation to create services corresponding to the functional domains specified in the AO module as independent software components. This workshop.\nHow to do this Workshop? Start by setting up your environment by completing the Setup Environment section.\n** Optionally ** complete the AO Tutorial - a hands-on tutorial for the Architectural Observability module\nThen extract services corresponding to the domains specified in the AO Module, do the RE Tutorial.\nTo delete the resources created in the setup, make sure to do the Cleanup section when you\u0026rsquo;re done.\nTo flip pages use the right and left arrows at the sides of the main frame.\nUse the left frame for content navigation and search.\nTo benefit the most from this workshop, you should know: Basic Java (we will use Eclipse for coding). Basic UNIX commands. Basic AWS concepts. Additional Help For any additional help, please reach out to vFunction support support@vfunction.com\n"
},
{
	"uri": "/200_refactoring-engine/210_servicecreation.html",
	"title": "Service Creation",
	"tags": [],
	"description": "",
	"content": "\nService Creation In this part of the lab, you will create the services identified in the analysis, refactor them and perform basic testing.\nYou will extract three services: OrderController, InventoryController and ProductController, compile and test them.\nThis section is done on the workshop-win VM: The Windows VM which servers as the Development Machine. This machine has the source code as well as the necessary software components such as Java 8, Eclipse and Postman.\nYou can refer to the following video to see all the steps in this section:\n"
},
{
	"uri": "/200_refactoring-engine/210_servicecreation/2_download_service_specs.html",
	"title": "Download service specs",
	"tags": [],
	"description": "",
	"content": "\nDownload the service specification files Open the Chrome web browser and go to the vFunction WebUI Analysis page. Select \u0026ldquo;Baseline 1\u0026rdquo; measurement (specified in the AO Tutorial)\nMark InventoryController, OrderController and ProductController for extraction in the ANALYSIS page by going through each one, clicking the menu near the number next to the name (3 dots) and selecting SAVE. A tick-mark on the sphere indicates it is marked for extraction. Note that the common library is marked for extraction too.\nMarking a service for extraction Services marked for extraction Switch to the SERVICE CREATION page, press CONFIGURE and set it up as shown here:\nService Config Dialog for Service Creation The Group ID is the group ID that will be set for the services. The Target Platform is what platform should the services be configured for and the Dependency Repository type is the current repository type used for building the application\nClose the Service Configuration dialog and download all service specifications to C:\\vFunctionLab\\service-specs files by clicking DOWNLOAD. Then, download the code-copy tool to the same folder as the specification files (click on the link in the Extract your first service dialog)\nThe browser might be configured not to prompt for a folder when downloading files. In that case, locate the destination folder by doing \u0026ldquo;Show in Folder\u0026rdquo; on one of the downloaded files and then copy the files to C:\\vFunctionLab\\service-specs. Note that code-copy.exe should also be in the same folder as the .json files.\n"
},
{
	"uri": "/200_refactoring-engine/210_servicecreation/3_code_copy.html",
	"title": "Code extraction",
	"tags": [],
	"description": "",
	"content": "\nCompile the original OMS application The code-copy application relies on the local maven repo to generate the required maven / gradle dependencies. To ensure the local repo is updated, compile the original application so the necessary used libraries will be downloaded from maven central.\nOpen a command prompt and cd to c:\\vFunctionLab\\oms-tutorial\nPull the latest version from the public git repository:\ngit pull Go to the application folder cd oms-webmvc Compile using maven: mvn clean install Extracting baseline code using code-copy You will now use the code-copy application, downloaded with the specification files, to create the baseline code for the extracted services.\nOpen a command prompt and cd to c:\\vFunctionLab\\service-specs\nOptionally run code-copy -help to see the various arguments and their meaning\nRun the following commands:\ncode-copy -spec CommonLibrary.json -source ..\\oms-tutorial\\oms-webmvc -dest ..\\oms-services\\common code-copy -spec OrderController.json -source ..\\oms-tutorial\\oms-webmvc -dest ..\\oms-services\\order-controller code-copy -spec InventoryController.json -source ..\\oms-tutorial\\oms-webmvc -dest ..\\oms-services\\inventory-controller code-copy -spec ProductController.json -source ..\\oms-tutorial\\oms-webmvc -dest ..\\oms-services\\product-controller Run Spotless to cleanup the code vFunction v2.8 and above includes the spotless plugin in the build files by default. This plugin removes redundant imports as well as formats the source code.\nRun the following command in each of the services folders (i.e., subfolders of c:\\vFunctionLab\\oms-services)\nmvn spotless:apply Note: if you don\u0026rsquo;t want to use spotless, you can remove the spotless plugin from the build files (pom.xml and build.gradle) or add -DskipSpotless when compiling the services\nImport the services to Eclipse Validate your Eclipse settings:\na. Run Eclipse and select C:\\vFunctionLab\\workspace as the workspace\nb. Open the Eclipse Preferences dialog (Windows -\u0026gt; Preferences)\nc. Select Java-\u0026gt;Compiler and set the Compiler compliance level to 1.8\nd. Add OpenJDK to the Java-Installed JREs (path as in the image below or under C:\\Program Files\\Eclipse Adoptium\\ e.g., C:\\Program Files\\Eclipse Adoptium\\jdk-8.0.362.9-hotspot)\ne. Set the Java-\u0026gt;Installed JREs-\u0026gt;Execution Environment for JavaSE-1.8 to point at the installed JDK\nDelete the existing projects in the Eclipse Workspace\nImport the code in the folder containing the extracted code into your Java IDE as Maven projects\na. Do File-\u0026gt;Import\u0026hellip; (Eclipse menu bar)\nb. Select Existing Maven Projects and hit Next \u0026gt;\nc. Set the root directory as C:\\vFunctionLab\\oms-services and select all Project\nd. Click Finish and wait for the load/build to complete\n"
},
{
	"uri": "/200_refactoring-engine/210_servicecreation/4_common_lib.html",
	"title": "Common library",
	"tags": [],
	"description": "",
	"content": "\nBuilding the Common Library The common library should compile without any changes.\nOpen the context menu of the common project in Eclipse, click Run As and select Maven install to compile.\nThe compilation should be successful.\n"
},
{
	"uri": "/200_refactoring-engine/210_servicecreation/5_db_config.html",
	"title": "Config Data Source",
	"tags": [],
	"description": "",
	"content": "\nReconfiguring the services data source from Spring MVC to Spring Boot The original application is a Spring Web MVC application, using a MySQL database running in Tomcat via JNDI (Java Naming and Directory Interface). The configuration is specified in spring-config.xml (src/main/resources folder) of the original application.\nTo switch from the JNDI based Spring MVC configuration to the Spring Boot configuration, we will need to do three steps for each of the services:\nAdd a dependency to connect to MySQL DB to the pom.xml of the service \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; Delete the XML elements src/main/resources/META-INF/rr/spring-config.xml in the resources/META-INF/rr directory (lines 9-39):\nStarting from:\n\u0026lt;jdbc:initialize-database data-source=\u0026#34;dataSource\u0026#34;\u0026gt; \u0026lt;jdbc:script location=\u0026#34;classpath:schema.sql\u0026#34;/\u0026gt; \u0026lt;/jdbc:initialize-database\u0026gt; Ending with:\n\u0026lt;tx:annotation-driven proxy-target-class=\u0026#34;true\u0026#34; transaction-manager=\u0026#34;transactionManager\u0026#34;/\u0026gt; \u0026lt;bean class=\u0026#34;org.springframework.orm.jpa.JpaTransactionManager\u0026#34; id=\u0026#34;transactionManager\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;entityManagerFactory\u0026#34; ref=\u0026#34;entityManagerFactory\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; Connect to the workshop-linux VM running the original application, and view the DB config file:\nsudo less /opt/tomcat/latest/webapps/oms-0.0.1-SNAPSHOT/META-INF/context.xml The URL, username and password will be used in the next step.\nCreate an application.properties file under the folder src/main/resources with the following content:\nspring.datasource.url=[url] spring.datasource.driver-class-name =com.mysql.cj.jdbc.Driver spring.datasource.username=[username] spring.datasource.password=[password] spring.jpa.hibernate.ddl-auto=update Set the url, username and password (without the double quotes) according to the values in the application\u0026rsquo;s context.xml above.\nThe URL should start with jdbc:mysql and end with ?createDatabaseIfNotExist=true; the rest should be omitted.\nIf the URL refers to localhost, then either replace it with the private ip of the Linux VM, or if you intend to deploy on EKS, replace the URL with the access point of the RDS service that was created for the workshop.\nExample using the Linux DB: jdbc:mysql://172.2.0.4:3307/oms1?createDatabaseIfNotExist=true\nExample using the RDS DB: jdbc:mysql://workshop-mysql-o4o2kr.c6wk1jfk53qs.us-west-2.rds.amazonaws.com:3306/oms1?createDatabaseIfNotExist=true\nMake sure there are no white spaces after the values (e.g. for username and password)\nWe will fine-tune these properties for each service in the following sections.\nIf you get an error opening .properties files in Eclipse, right click on the .properties file and open it in a text editor (Open With…-\u0026gt;Text Editor)\n"
},
{
	"uri": "/200_refactoring-engine/210_servicecreation/6_order_controller.html",
	"title": "Order Controller",
	"tags": [],
	"description": "",
	"content": "\nPasting double quotes to Eclipse Java editor may result in smart quotation causing compilation errors. In this case, you need to change them to neutral double quotes\nOrder Controller Go to the OrderController project in Eclipse, and configure the DB as described in section Config Data Source\nEdit the class com.oms.ordercontroller.OrderControllerApp.java\nAdd the annotation @EntityScan(basePackages = { \u0026quot;com.oms.entity\u0026quot; }) (ensure the double quotes are copied correctly - see above note)\nAdd the requirement import statement (import org.springframework.boot.autoconfigure.domain.EntityScan; )\nThe file should be similar to the below (the added lines are marked //added):\npackage com.oms.ordercontroller; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.ImportResource; import org.springframework.boot.autoconfigure.domain.EntityScan; // added @SpringBootApplication @ImportResource({\u0026#34;spring-config.xml\u0026#34;}) @EntityScan(basePackages = { \u0026#34;com.oms.entity\u0026#34; }) // added public class OrderControllerApp { public static void main(String[] args) { SpringApplication.run(OrderControllerApp.class, args); } } Compile the service by doing Maven clean and Maven install using the context menu of the project or pom.xml file\nRun the service as a Spring Boot App using the context menu of the project\nOpen postman, if prompted to create an account or sign, click Skip and go to the app (at the bottom)\nIf the collections are empty, import the OMS Services collection from the oms-tutorial repo:\na. Do File-\u0026gt;Import\u0026hellip; (or click Ctrl+O)\nb. Click Upload Files\nc. Navigate to C:\\vFunctionLab\\oms-tutorial\\oms-services and double click on \u0026lsquo;OMS Services.postman_collection\u0026rsquo;\nd. Click Import\nOpen Postman, go to the Orders folder in OMS Services, then review and run the requests Create Order, Create Multiple Orders and Get Order By ID. You should see responses as below:\nScreenshot of using Postman to test Order Controller "
},
{
	"uri": "/200_refactoring-engine/210_servicecreation/7_inventory_controller.html",
	"title": "Inventory Controller",
	"tags": [],
	"description": "",
	"content": "\nInventory Controller InventoryController is similar to OrderController, but it uses Apache Geode, so we will need to use one of the profiles defined in the original application for that.\nGo to the InventoryController project in your IDE, and perform the steps described in section Config Data Source\nTo set the service port (the default port 8080 has been taken by OrderController), open the application.properties file and add the property server.port=8081\nIn addition, add the property spring.profiles.active=local so the GemFire will be used locally. You can view the profile in the file spring-config.xml.\nOpen the file src/main/java/com/oms/inventorycontroller/InventoryControllerApp.java and add the annotation @EntityScan(basePackages = { \u0026quot;com.oms.entity\u0026quot; }) with the required import to the application class as you did for Order Controller\nCompile and run InventoryController as you did for Order Controller\nOpen Postman and review and run the requests under the Inventory folder (OMS Services collection). Note that the request Get Inventory Item Generated EP is sent to the entry point generated by code-copy (see com.vfunction.oms.inventorycontroller.InventoryServiceController).\n"
},
{
	"uri": "/200_refactoring-engine/210_servicecreation/8_product_controller.html",
	"title": "Product Controller",
	"tags": [],
	"description": "",
	"content": "\nProduct Controller ProductController calls InventoryController to support requests such as finding the inventory according to the product description. Here we will show how to refactor the code to support service to service calls.\nGo to the ProductController project in Eclipse, and perform the steps described in section Config Data Source\nTo set the service port (the default port 8080 has been taken by OrderController), open the application.properties file and add the property server.port=8082\nOpen the file src/main/java/com/oms/productcontroller/ProductControllerApp.java and add the annotation @EntityScan(basePackages = { \u0026quot;com.oms.entity\u0026quot; }) with the required import to the application class as you did for Order Controller\nOpen the class com.oms.service.ProductService. You should see errors related to InventoryService: We cannot continue to use InventoryService directly within ProductController, as this class was separated into the InventoryController service during the analysis. Instead, the ProductController should call the entry point of InventoryController, implemented by com.oms.inventorycontroller.InventoryServiceController in InventoryController (this class was generated by vFunction)\nOpen the pom.xml file of ProductController and add the dependency to WebFlux if it is missing. This is needed for using a web client to call the APIs of Inventory Controller.\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-webflux\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Copy the package com.oms.inventorycontroller.dto from InventoryController to ProductController so ProductController can use the same Data Transfer Object (DTO) classes required by InventoryController http endpoint\nSwitch back to com.oms.service.ProductService class and delete the member InventoryService inventoryService (along with its @Autowired annotation)\nAdd a WebClient member to ProductService and initialize it to call the InventoryController service. Ensure the port is set correctly:\nWebClient inventoryServiceClient = WebClient.create(\u0026#34;http://localhost:8081\u0026#34;); Note that the required import statement is:\nimport org.springframework.web.reactive.function.client.WebClient; Replace the implementation of getProductInventory(), so the Inventory related to the product will be brought by calling the InventoryController service over http\npublic Inventory getProductInventory(String pid) { logger.log(this.getClass().getName()); InventoryServiceFetchInventoryInDTO inDTO = new InventoryServiceFetchInventoryInDTO(); inDTO.setSkuId(pid); InventoryServiceFetchInventoryOutDTO outDTO = inventoryServiceClient.post() .uri(\u0026#34;inventoryService/fetchInventory\u0026#34;) .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) .body(Mono.just(inDTO), InventoryServiceFetchInventoryInDTO.class).retrieve() .bodyToMono(InventoryServiceFetchInventoryOutDTO.class).block(); return outDTO.getRetVal(); } Note that the required import statements are:\nimport com.oms.inventorycontroller.dto.InventoryServiceFetchInventoryInDTO; import com.oms.inventorycontroller.dto.InventoryServiceFetchInventoryOutDTO; import org.springframework.http.HttpHeaders; import org.springframework.http.MediaType; import reactor.core.publisher.Mono; If needed, remove the import of com.oms.entity.ShippingService and any other code elements referencing ShippingService, as this was marked as dead-code in the analysis\nCompile the ProductController service (Maven clean and then Maven install)\nRun the OrderController service (if not already running) and create orders lines by sending the request Create Multiple Orders from Postman\nRun the InventoryController (if not already running) and create inventory items by sending the request Create Multiple Inventory Items from Postman\nRun the ProductController and send Create Products request from Postman to create the products\nSend Find All Products request from Postman; the response should be a JSON containing the list of products\nSend Find Inventory By Product Description request, the response should be a JSON object of all inventory items related to products containing iPhone in the description\nSend Get Charges For Product - the result should be the amount charged for all orders made for the product with ID SM-S20-BLK (10.0)\n"
},
{
	"uri": "/200_refactoring-engine/210_servicecreation/9_summary.html",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "\nSummary We demonstrated how vFunction simplifies and expedites extracting running independent services from the original application code into spring-boot services.\nWe started by downloading the specification files from vFunction.\nThen we used code-copy to extract and build the common library as the infrastructure jar for the services.\nWe then described the details to extract, build, run and test three services: OrderController, InventoryController and ProductController. All three services share a MySQL DB. ProductController also requires implementing a service-to-service call, since it uses the API of InventoryController for some of its queries.\n"
},
{
	"uri": "/10_setup.html",
	"title": "Setup Environment",
	"tags": [],
	"description": "",
	"content": "\nSetup AWS workshop environment In this section, you will create and deploy the necessary AWS services required for this workshop by running a Terraform package.\nThe below diagram depicts the AWS services provisioned the workshop installation package and their usage (the xxx in the names represent a variable string):\nRun the installation package to deploy the Workshop resources Log in to your AWS Account\nOpen the AWS CloudShell (icon is on top right toolbar)\nDownload the workshop installation package from the vFunction portal using the command:\ncurl -o vfunction-workshop-aws-installation.tgz https://portal.vfunction.com/file/023fe68123e76901d11470b8aaefb545/bd14b2b4-52c1-452d-aa6a-2e55520bb1ce/vfunction-workshop-aws-installation.tgz Unpack the installation package tar zxvf vfunction-workshop-aws-installation.tgz Edit the file ./config/installation.yaml file: vim ~/vfunction-workshop/config/installation.yaml Set the region to which the resources will be deployed- you can use any US region, however, if you want to do the Appendix for using AWS Migration Hub Refactor Spaces, make sure that this service is available in the region you choose by searching Refactor Spaces in this region.\nFill in your org_name (must be shorter than 50 chars) and email (e.g., \u0026ldquo;my company\u0026rdquo; as org_name and \u0026ldquo;myname@company.net\u0026rdquo; as email)\nIf you intend to deploy services to EKS, Set use_refactoring to true, otherwise set it to false\nRun the installation and wait for the script to complete\nbash ~/vfunction-workshop/install.sh Setup Remote Desktop to Workshop Windows VM Switch to the EC2 Instances page in the region you set to deploy the workshop\nOpen the EC2 instance with the name starting with workshop-windows (should be in running state) and copy its public IPv4 Address\nOpen your Remote Desktop Protocol (RDP) client and paste the IP as the Host Name or Address\nStart the RDP session. The user name is workshop the password is vFunction2021!\nIf prompted, approve the certificate to access the remote machine\nYou should now see the Windows Desktop running on the Dev VM.\nAccess the Workshop Linux VM Copy the private IP address of the Workshop-Linux VM from the AWS console\nIn the Windows VM (Remote Desktop), run PuTTY (icon is on the desktop)\nIn the PuTTY dialog, enter the private IP address of the Linux VM and click Open\nLogin using the same credentials (login: workshop password:vFunction2021!)\nLogin to the vFunction server The vFunction platform installation was automated by the Workshop Installation package.\nTo login to the platform:\nOpen Chrome in the Windows VM (Remote Desktop)\nType the IP Address of the Linux VM\nLogin with the e-mail you entered in the installation.yaml file. The password is vFunction2021!\nYou should see a screen similar to:\nYou are now ready to proceed to the workshop.\n"
},
{
	"uri": "/200_refactoring-engine.html",
	"title": "RE Tutorial",
	"tags": [],
	"description": "",
	"content": "\nRefactoring Engine (RE) Tutorial Please complete the Setup Environment section before starting the tutorial and don\u0026rsquo;t forget to Cleanup when you\u0026rsquo;re done with the workshop\nThis is a hands-on tutorial for the vFunction Refacotring Engine (RE) module.\nWe will use the Order Management System (OMS) demo application with the measurement done in the AO Tutorial to show how to create services from domain specifications defined in the AO module.\nWe assume this tutorial is done after completing the AO Tutorial\nLearning Objectives How to use vFunction RE to create services corresponding to the domains identified in vFunction AO What manual efforts are involved in the service process Understand some of the best practices Workshop Flow The following flowchart describes the tutorial steps and artifacts of this tutorial.\nThe rounded rectangles represent steps you\u0026rsquo;ll perform (with time estimation), the parallelograms represent artifatcs / results (some can be downloaded) and the trapezoid represent an event.\ngraph TD; BaseLineMeasurement[/\" Baseline Measurement\"/]--\u003eServiceCreation([\"Service Creation: Create the independently deployable services (100 min.)\"]) ServiceCreation --\u003e Services[/\"Services (click to see in Git)\"/] Services --\u003e Deployment([\"Deployment: Deploy the services to EKS (20 min.)\"]) Deployment --\u003e KubeServices(\"Services Deployed in EKS\") click Setup \"./10_setup/_index.aws.html\" click Learning \"./20_learning.html\" click Analysis \"./30_analysis.html\" click ServiceCreation \"./40_servicecreation.html\" click Deployment \"./50_deployment/_index.aws.html\" click Cleanup \"./60_cleanup/_index.aws.html\" click OMSApp \"https://bitbucket.org/vfunction/oms-tutorial/src/mysql/oms-webmvc/\" _blank click Measurement \"https://portal.vfunction.com/file/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1dWlkIjoiNWNhYmNjYTMtNTc5MC00MmY1LWE0ODgtM2RhODZmOGVjYzlmIn0.C--1C7PmFRGUxWxDe-hOtaA9PvmV8NiLLbHrmXmYEr0/5cabcca3-5790-42f5-a488-3da86f8ecc9f/Analysis-Tutorial-Start.zip\" click ServiceSpecs \"https://bitbucket.org/vfunction/oms-tutorial/src/mysql/oms-services/service-specs/\" _blank click Services \"https://bitbucket.org/vfunction/oms-tutorial/src/mysql/oms-services/\" _blank "
},
{
	"uri": "/200_refactoring-engine/220_deployment.html",
	"title": "Deployment",
	"tags": [],
	"description": "",
	"content": "\nDeployment using vFunction Deployment Tool This section is an optional/advanced section intended for people with DevOps experience.\nAlso, you should skip ths section if you haven\u0026rsquo;t set use_refactoring to true in Setup Environment section.\nAfter having working services, you can optionally deploy them to a micro-services environment such as a Kubernetes cluster or cloud service.\nvFunction has an experimental tool to automate such a deployment.\nSteps Connect to the workshop-linux VM (via PuTTY)\ncd to deployment tool folder\ncd /opt/vfunction-packages/vfunction-refactoring-for-kubernetes Review the configuration file\nless config/installation.yaml During the environment setup, the terraform has already configured the necessary settings such as the repo URL, username, password, nginx.\nThe services and the properties are also already configured under services:springBoot:services\nExit the configuration file (installation.yaml) and create the following folders (the names must match the names of the services in installation.yaml and in general, they must be all small letters with hyphens)\ncd services mkdir product-controller mkdir inventory-controller mkdir order-controller Open Git Bash window\nGo to the services folder\ncd /c/vFunctionLab/oms-services Set an environment variable for the IP address of the workshop-linux machine\nLINUXVMIP=[the IP address of workshop Linux VM] Copy order-controller\nscp ./order-controller/target/OrderController-1.0-SNAPSHOT.jar workshop@$LINUXVMIP:/opt/vfunction-packages/vfunction-refactoring-for-kubernetes/services/order-controller Enter the password (vFunction2021!) when prompted\nNote: If scp fails because the remote certification has changed, then delete c:\\Users\\workshop.ssh (the entire folder) and try again\nSimilarly copy inventory controller\nscp ./inventory-controller/target/InventoryController-1.0-SNAPSHOT.jar workshop@$LINUXVMIP:/opt/vfunction-packages/vfunction-refactoring-for-kubernetes/services/inventory-controller And product controller:\nscp ./product-controller/target/ProductController-1.0-SNAPSHOT.jar workshop@$LINUXVMIP:/opt/vfunction-packages/vfunction-refactoring-for-kubernetes/services/product-controller Go back to the workshop-linux VM (PuTTY) and do cd /opt/vfunction-packages/vfunction-refactoring-for-kubernetes\nSince the ECR password is valid only for 24 hours, refresh it in the configuration by running:\nbash ./aws-refresh-ecr-token.sh Run the installer\nsudo bash install.sh -n vfunction -b The last output messages of the script should look *similar* to: ```text Wait for all service pods to run in namespace vfunction and then access the services with the following FQDNs: product-controller -\u0026gt; a2ac33ccf24a245bd9891679063fd3a5-840504988.us-west-2.elb.amazonaws.com/product-controller/ inventory-controller -\u0026gt; a2ac33ccf24a245bd9891679063fd3a5-840504988.us-west-2.elb.amazonaws.com/inventory-controller/ order-controller -\u0026gt; a2ac33ccf24a245bd9891679063fd3a5-840504988.us-west-2.elb.amazonaws.com/order-controller/ ``` Copy the FQDN somewhere for later use (e.g., copy them to a notepad) Go to the AWS console and open the EKS service (in the same region as the EC2 instances) with the name starting with workshop_eks and review the workloads. You should see three workloads corresponding to the three services with namespace vfunction and they should be in the Ready state.\nYou can also review the ECR and see three repositories corresponding to the three services.\nOpen postman and test the calls to the various services by replacing the hostname from localhost:8080 with the corresponding FQDNs above. Below is an example screenshot (note the URL):\nNote: Some API calls of the product controller return internal server error (500). Can you think why and how to fix it? (hint: service to service dependency)\nNow that we have three services deployed to EKS, we can use AWS Migration Hub Refactor Spaces to redirect calls from the OMS original application to the services. If you are interested in trying this out, do this Appendix before proceeding to Cleanup.\n"
},
{
	"uri": "/300_cleanup.html",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": "\nCleanup In this section, we will clean up the resources created for this workshop by vfunction-workshop package.\nLog-in to the Workshop Linux VM (using PuTTY in the Workshop Windows VM) and do the following command:\nkubectl delete namespace ingress-nginx Log in to your AWS Account and open the AWS CloudShell (icon is on top right toolbar)\nRun the \u0026ldquo;destroy\u0026rdquo; script to delete all the resources\nbash ~/vfunction-workshop/destroy.sh Wait for the script to complete\nDelete the vfunction-workshop-aws-installation.tgz and the vfunction-workshop-aws-installation directory (under your home directory in the cloud shell)\ncd ~ rm -rf ./vfunction-workshop rm vfunction-workshop-aws-installation.tgz "
},
{
	"uri": "/500_awsrefactorspaces.html",
	"title": "Appendix: AWS Refactor Spaces",
	"tags": [],
	"description": "",
	"content": "\nAppendix: Using AWS Refactor Spaces to \u0026ldquo;Strangle\u0026rdquo; the OMS Application Strangler Pattern is used for incremental migration from a legacy application to services by replacing existing functionalities provided by the original application with functionalities provided by the services.\nAWS Migration Hub Refactor Spaces is a tool that allows one to automate and manage this incremental migration by creating and configuring an elastic load balancer in AWS that routes API calls either to the original application or to the relevant service.\nIn this appendix, you will use Refactor Spaces to strangle the example OMS application after it was refactored in vFunction, and three of the services were deployed to EKS.\nPrecondition: Test that the original application works via the public IP address In the Windows VM, open Postman\nImport to postman the file: C:\\vFunctionLab\\oms-tutorial\\oms-webmvc\\script\\OMS.postman_collection.json\nIn the OMS Collection, open Create Order and change localhost with the public IP of the Linux machine\nSend the request and ensure you get a correct response\nCreate Environment Open the AWS console of one of the EC2 instances of the workshop VMs and copy the VPC ID for the next steps\nSearch and open the Refactor Spaces feature of AWS Migration Hub (same region as the workshop)\nOn the left pane, click on Environments and then click Create environment in the main pane\nIn the Create environment form, set the Environment name to Workshop-OMS and hit Next\nIn the Create application form, enter Order Management System for the application name\nSelect the VPC ID of the workshop VPC\nClick Next in the Share environment - optional\nReview and Create the environment\nCreate Service with Default Route After the environment on the Environments page is shown to be in the Healthy state, click on the environment and then on the Order Management System application.\nCreate a service based to which the messages will be routed to by default:\na. Set the service name to OMS-Monolith\nb. Set the VPC to the VPC of the workshop (as before)\nc. The default route Endpoint should redirect the traffic to the original OMS application running on the Linux machine, so it should be in the form: http://[Linux VM public IP]:8080/oms-0.0.1-SNAPSHOT/service\nd. Check the checkbox for the default route\nThe application screen should look similar to:\nCreate Service for Order Controller In the Order Management Application Screen, click Create Service\nSet the Service name to order-controller\nSet the VPC to the VPC of the workshop (as before)\nSet the endpoint to the endpoint of order controller in EKS - the endpoints used in the Deployment section (e.g., http://a607a6d36a4cf497b86eeedc239dcb91-fe444a9b3f77e2b5.elb.us-west-2.amazonaws.com/order-controller)\nClick Create service\nClick Create Route and set the Source path to /order-controller, then click Create route. The example form is below: The application screen should now look similar to:\nTest Copy the Proxy URL of the Order Management System application in Refactor Spaces and use it to call APIs by replacing it in Postman\nExample: For a Proxy URL https://gv4qtsettk.execute-api.us-west-2.amazonaws.com/prod\nhttps://gv4qtsettk.execute-api.us-west-2.amazonaws.com/prod/order-controller/order/multi to create multiple order by routing the calls to EKS\nhttps://gv4qtsettk.execute-api.us-west-2.amazonaws.com/prod/inventory sends the API call to the original application to create an inventory item\nCleanup Before proceeding to the Cleanup section, make sure to delete the Refactoring Spaces environment. You will need first to delete the routes and services, then the application and finally the environment.\n"
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]